datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl", "debian-openssl-3.0.x"]
}

generator zod {
  provider = "zod-prisma"
  output   = "./zod.ignore" // (default) the directory where generated zod schemas will be saved

  relationModel = true // (default) Create and export both plain and related models.
  // relationModel         = "default" // Do not export model without relations.

  modelCase = "PascalCase" // (default) Output models using pascal case (ex. UserModel, PostModel)
  // modelCase = "camelCase" // Output models using camel case (ex. userModel, postModel)

  modelSuffix = "Model" // (default) Suffix to apply to your prisma models when naming Zod schemas

  // useDecimalJs          = false // (default) represent the prisma Decimal type using as a JS number
  // useDecimalJs = true // represent the prisma Decimal type using Decimal.js (as Prisma does)

  // imports = null // (default) will import the referenced file in generated schemas to be used via imports.someExportedVariable

  // https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
  prismaJsonNullability = true // (default) uses prisma's scheme for JSON field nullability
  // prismaJsonNullability = false // allows null assignment to optional JSON fields
}

model User {
  id            String     @id @unique @default(nanoid(7))
  password      String?
  email         String     @unique
  name          String?
  image         File?      @relation("ProfileImage", fields: [imageId], references: [id])
  imageId       String?
  githubId      String?    @unique
  role          UserRole   @default(USER)
  status        UserStatus @default(ACTIVE)
  group         Group?     @relation(fields: [groupId], references: [id])
  groupId       String?
  posts         Post[]
  flows         Flow[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  deletedAt     DateTime?
  uploadedFiles File[]     @relation("UploadedFiles")
}

model Group {
  id        String    @id @unique @default(nanoid(7))
  name      String    @unique
  users     User[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Post {
  id        String     @id @unique @default(nanoid(7))
  title     String
  content   String?
  status    PostStatus @default(DRAFT)
  author    User       @relation(fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  deletedAt DateTime?
}

model Flow {
  id        String    @id @unique @default(nanoid(7))
  content   String?
  owner     User      @relation(fields: [ownerId], references: [id])
  ownerId   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model File {
  id            String  @id @unique @default(nanoid(20))
  key           String
  name          String
  size          Int
  mimeType      String?
  createdBy     User    @relation("UploadedFiles", fields: [createdById], references: [id])
  createdById   String
  usedByAsImage User[]  @relation("ProfileImage")
}

enum PostStatus {
  PUBLISHED
  DRAFT
  ARCHIVED
}

enum UserRole {
  OWNER
  ADMIN
  USER
  GUEST
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BANNED
}
